*dotmd.nvim.txt*        For Neovim >= 0.10.0        Last change: 2025 April 09

==============================================================================
Table of Contents                               *dotmd.nvim-table-of-contents*

1. dotmd                                                    |dotmd.nvim-dotmd|
  - Features                                       |dotmd.nvim-dotmd-features|
  - Installation                               |dotmd.nvim-dotmd-installation|
  - Configuration                             |dotmd.nvim-dotmd-configuration|
  - Quick Start                                 |dotmd.nvim-dotmd-quick-start|
  - How It Works                               |dotmd.nvim-dotmd-how-it-works|
  - Template Example                       |dotmd.nvim-dotmd-template-example|
  - Commands                                       |dotmd.nvim-dotmd-commands|
  - Contributing                               |dotmd.nvim-dotmd-contributing|

==============================================================================
1. dotmd                                                    *dotmd.nvim-dotmd*

An opinionated, and fast Neovim plugin for managing markdown notes, todos, and
journal entries — powered by Lua.


FEATURES                                           *dotmd.nvim-dotmd-features*

- **Structured Note Directories:** Organize your notes into notes/, todo/, journal/, and an inbox.md file — all configurable.
- **Smart File Creation:** Easily create note files with optional templates and unique file naming.
- **Daily Todos:** Auto-generate daily todo files and rollover unchecked tasks from the previous day.
- **Daily Journals:** Quickly generate a markdown journal entry for the current date.
- **Note Picker:** Search or grep your notes across all categories using vim.ui.select or the snacks.nvim plugin if available.
- **Inbox:** Quick dump zone for thoughts, tasks, and references.
- **Todo Navigation:** Move to the previous/next daily todo entry.
- **Fully Configurable:** Customize directories, templates, and behavior.


INSTALLATION                                   *dotmd.nvim-dotmd-installation*

Using lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    -- dotmd.lua
    return {
     "y3owk1n/dotmd.nvim",
     version = "*", -- remove this if you want to use the `main` branch
     opts = {
      -- your configuration comes here
      -- or leave it empty to use the default settings
      -- refer to the configuration section below
     }
    }
<

Ifyou are using other package managers you need to call `setup`

>lua
    require("dotmd").setup({
      -- your configuration
    })
<


REQUIREMENTS ~

- Neovim0.9+ with Lua support
- The following CLI tools must be available in your $PATH:
    - `find`for listing files across note directories
    - `grep`for searching content (used in pick({ grep = true }))
- Optional but recommended:
    - snacks.nvim <https://github.com/folke/snacks.nvim>For better note picking and grepping


CONFIGURATION                                 *dotmd.nvim-dotmd-configuration*


  [!important] Make sure to run `:checkhealth dotmd` if something isn’t working
  properly.
**dotmd.nvim** is highly configurable. And the default configurations are as
below.


DEFAULT OPTIONS ~

>lua
    ---@class DotMd.Config
    ---@field root_dir? string @default "~/notes/"
    ---@field default_split? "vertical" | "horizontal" | "none" @default "vertical"
    ---@field dir_names? DotMd.Config.DirNames
    ---@field templates? Dotmd.Config.Templates
    
    ---@class DotMd.Config.DirNames
    ---@field notes? string @default "notes"
    ---@field todo? string @default "todo"
    ---@field journal? string @default "journal"
    
    ---@class Dotmd.Config.Templates
    ---@field notes? fun(name: string): string[]
    ---@field todo? fun(date: string): string[]
    ---@field journal? fun(date: string): string[]
    ---@field inbox? fun(date: string): string[]
    {
     root_dir = "~/notes/",
     default_split = "vertical",
     dir_names = {
      notes = "notes",
      todo = "todo",
      journal = "journal",
     },
     templates = {
      notes = function(title)
       return {
        "---",
        "title: " .. title,
        "created: " .. os.date("%Y-%m-%d %H:%M"),
        "---",
        "",
        "# " .. title,
        "",
       }
      end,
      todo = function(date)
       return {
        "---",
        "type: todo",
        "date: " .. date,
        "---",
        "",
        "# Todo for " .. date,
        "",
        "## Tasks",
        "",
       }
      end,
      journal = function(date)
       return {
        "---",
        "type: journal",
        "date: " .. date,
        "---",
        "",
        "# Journal Entry for " .. date,
        "",
        "## Highlights",
        "",
        "## Thoughts",
        "",
        "## Tasks",
        "",
       }
      end,
      inbox = function()
       return {
        "---",
        "type: inbox",
        "---",
        "",
        "# Inbox",
        "",
        "## Quick Notes",
        "",
        "## Tasks",
        "",
        "## References",
        "",
       }
      end,
     },
    }
<


QUICK START                                     *dotmd.nvim-dotmd-quick-start*

See the example below for how to configure **dotmd.nvim**.

>lua
    {
     "y3owk1n/dotmd.nvim",
     event = { "VeryLazy" },
     ---@type Dotmd.Config
     opts = {},
     keys = {
      {
       "<leader>nc",
       function()
        require("dotmd").create_note()
       end,
       mode = "n",
       desc = "[DotMd] Create new note",
       noremap = true,
      },
      {
       "<leader>nt",
       function()
        require("dotmd").create_todo_today()
       end,
       mode = "n",
       desc = "[DotMd] Create todo for today",
       noremap = true,
      },
      {
       "<leader>ni",
       function()
        require("dotmd").inbox()
       end,
       mode = "n",
       desc = "[DotMd] Inbox",
       noremap = true,
      },
      {
       "<leader>nj",
       function()
        require("dotmd").create_journal()
       end,
       mode = "n",
       desc = "[DotMd] Create journal",
       noremap = true,
      },
      {
       "<leader>np",
       function()
        require("dotmd").todo_navigate("previous")
       end,
       mode = "n",
       desc = "[DotMd] Navigate to previous todo",
       noremap = true,
      },
      {
       "<leader>nn",
       function()
        require("dotmd").todo_navigate("next")
       end,
       mode = "n",
       desc = "[DotMd] Navigate to next todo",
       noremap = true,
      },
      {
       "<leader>snn",
       function()
        require("dotmd").pick({
         type = "notes",
        })
       end,
       mode = "n",
       desc = "[DotMd] Search notes",
       noremap = true,
      },
      {
       "<leader>snN",
       function()
        require("dotmd").pick({
         type = "notes",
         grep = true,
        })
       end,
       mode = "n",
       desc = "[DotMd] Search notes grep",
       noremap = true,
      },
      {
       "<leader>snt",
       function()
        require("dotmd").pick({
         type = "todos",
        })
       end,
       mode = "n",
       desc = "[DotMd] Search todos",
       noremap = true,
      },
      {
       "<leader>snT",
       function()
        require("dotmd").pick({
         type = "todos",
         grep = true,
        })
       end,
       mode = "n",
       desc = "[DotMd] Search todos grep",
       noremap = true,
      },
      {
       "<leader>snj",
       function()
        require("dotmd").pick({
         type = "journal",
        })
       end,
       mode = "n",
       desc = "[DotMd] Search journal",
       noremap = true,
      },
      {
       "<leader>snJ",
       function()
        require("dotmd").pick({
         type = "journal",
         grep = true,
        })
       end,
       mode = "n",
       desc = "[DotMd] Search journal grep",
       noremap = true,
      },
     },
    },
<


HOW IT WORKS                                   *dotmd.nvim-dotmd-how-it-works*

**dotmd.nvim** is built around the idea of managing lightweight Markdown files
organized by category. Here’s how each feature works:


DIRECTORY STRUCTURE ~

**dotmd.nvim** uses a root directory with the following substructure
(customizable):

>bash
    dotmd/
    ├── inbox.md
    ├── notes/
    │   └── project-idea.md
    ├── todo/
    │   └── 2025-04-09.md
    └── journal/
        └── 2025-04-09.md
<


FILE CREATION ~

When you create a new note, **dotmd.nvim**

1. Promptsfor a file name or path.
2. Generates a file path inside the configured notes folder.
3. Optionally applies a notes template.
4. Opens the file in a vertical/horizontal split or current window.


TODO FILES ~

When you create a new todo file, **dotmd.nvim**

1. Checksif today’s todo file exists (e.g. todo/2025-04-09.md).
2. If not, rolls over unfinished `- [ ] tasks from the previous file` (if any).
3. Applies the todo template.
4. Opens the file for editing.


INBOX ~

The inbox is a special file that is used to dump thoughts, tasks, and
references.


JOURNAL FILES ~

When you create a new journal file, **dotmd.nvim**

1. Buildstoday’s journal path (e.g. journal/2025-04-09.md).
2. If the file doesn’t exist, creates it using the journal template.
3. Opens it for editing.


PICKER ~

1. Uses `vim.ui.select` for file list or grep.
2. If `snacks.nvim` is installed, uses snacks.picker() or snacks.grep() for enhanced UX.
3. Can filter by file type (notes, todo, journal, or all).


TEMPLATE EXAMPLE                           *dotmd.nvim-dotmd-template-example*

To create a template, just concatenate the template strings into a function
that returns a list of strings.

>lua
    journal = function(date)
      return {
        "---",
        "type: journal",
        "date: " .. date,
        "---",
        "# " .. date,
        "",
        "## What happened today?",
        "## Reflections",
        "## TODOs",
      }
    end
<


COMMANDS                                           *dotmd.nvim-dotmd-commands*

**dotmd.nvim** provides the following commands that you can use to map to your
own keybindings:

  -----------------------------------------------------------------------
  Functions                           Description
  ----------------------------------- -----------------------------------
  create_note()                       Prompt to create and open a new
                                      markdown note

  create_todo_today()                 Open/create today’s todo and roll
                                      over tasks

  create_journal()                    Open/create a journal entry for
                                      today

  inbox()                             Open the central inbox.md

  pick({ type, grep })                Pick or search notes by type

  todo_navigate("next")               Go to next day’s todo

  todo_navigate("previous")           Go to previous day’s todo
  -----------------------------------------------------------------------

CONTRIBUTING                                   *dotmd.nvim-dotmd-contributing*

Read the documentation carefully before submitting any issue.

Feature and pull requests are welcome.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
