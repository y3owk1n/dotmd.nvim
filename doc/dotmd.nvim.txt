*dotmd.nvim.txt*

Keep all your notes, todos, and journals inside Neovim without ever leaving the editor.

==============================================================================
Table of Contents                                               *dotmd.nvim.toc*

API ··························································· |dotmd.nvim.api|
Configurations ············································· |dotmd.nvim.config|
Types ······················································· |dotmd.nvim.types|

==============================================================================
API                                                             *dotmd.nvim.api*

M.setup                                                   *dotmd.nvim.api.setup*
    Entry point to setup the plugin

    Type: ~
        (fun(user_config?:DotMd.Config))


M.create_note({opts?})                              *dotmd.nvim.api.create_note*
     Create a new note

    Parameters: ~
        {opts?}  (DotMd.CreateFileOpts)

    Returns: ~
        (nil)


M.create_todo_today({opts?})                  *dotmd.nvim.api.create_todo_today*
     Create a new todo for today

    Parameters: ~
        {opts?}  (DotMd.CreateFileOpts)

    Returns: ~
        (nil)


M.create_journal({opts?})                        *dotmd.nvim.api.create_journal*
     Create a new journal entry

    Parameters: ~
        {opts?}  (DotMd.CreateFileOpts)

    Returns: ~
        (nil)


M.inbox({opts?})                                          *dotmd.nvim.api.inbox*
     Create or open inbox

    Parameters: ~
        {opts?}  (DotMd.CreateFileOpts)

    Returns: ~
        (nil)


M.pick({opts?})                                            *dotmd.nvim.api.pick*

    Parameters: ~
        {opts?}  (DotMd.PickOpts)

    Returns: ~
        (nil)


M.navigate()                                           *dotmd.nvim.api.navigate*

    Returns: ~
        (nil)


M.open({opts?})                                            *dotmd.nvim.api.open*
     Open a file from a list of directories

    Parameters: ~
        {opts?}  (DotMd.OpenOpts)

    Returns: ~
        (nil)


==============================================================================
Configurations                                               *dotmd.nvim.config*


Example Configuration:

>
{
	root_dir = "~/dotmd",
	default_split = "none",
	rollover_todo = {
		enabled = false,
		headings = { "Tasks" },
	},
	picker = nil,
	dir_names = {
		notes = "notes",
		todos = "todos",
		journals = "journals",
	},
	templates = {
		notes = function(title)
			return {
				"---",
				"title: " .. title,
				"created: " .. os.date("%Y-%m-%d %H:%M"),
				"---",
				"",
				"# " .. title,
				"",
			}
		end,
		todos = function(date)
			return {
				"---",
				"type: todo",
				"date: " .. date,
				"---",
				"",
				"# Todo for " .. date,
				"",
				"## Tasks",
				"",
			}
		end,
		journals = function(date)
			return {
				"---",
				"type: journal",
				"date: " .. date,
				"---",
				"",
				"# Journal Entry for " .. date,
				"",
				"## Highlights",
				"",
				"## Thoughts",
				"",
				"## Tasks",
				"",
			}
		end,
		inbox = function()
			return {
				"---",
				"type: inbox",
				"---",
				"",
				"# Inbox",
				"",
				"## Quick Notes",
				"",
				"## Tasks",
				"",
				"## References",
				"",
			}
		end,
	},
}
<


M.config                                              *dotmd.nvim.config.config*

    Type: ~
        (DotMd.Config)


==============================================================================
Types                                                         *dotmd.nvim.types*

                                     *dotmd.nvim.types.DotMd.Config.DirNameKeys*
DotMd.Config.DirNameKeys

    Variants: ~
        ("notes")
        ("todos")
        ("journals")


DotMd.Split                                       *dotmd.nvim.types.DotMd.Split*

    Variants: ~
        ("vertical")
        ("horizontal")
        ("float")


DotMd.PickType                                 *dotmd.nvim.types.DotMd.PickType*

    Variants: ~
        ("notes")
        ("todos")
        ("journals")
        ("all")


DotMd.PickerType                             *dotmd.nvim.types.DotMd.PickerType*

    Variants: ~
        ("telescope")
        ("fzf")
        ("snacks")
        ("mini")


DotMd.Config                                     *dotmd.nvim.types.DotMd.Config*

    Fields: ~
        {root_dir?}       (string)                     Root directory of dotmd, default is `~/dotmd`
        {default_split?}  (DotMd.Split)                Split direction for new or existing files, default is `none`
        {picker?}         (DotMd.PickerType)           Picker type, default is `nil`
        {rollover_todo?}  (DotMd.Config.RolloverTodo)
        {dir_names?}      (DotMd.Config.DirNames)
        {templates?}      (Dotmd.Config.Templates)


                                    *dotmd.nvim.types.DotMd.Config.RolloverTodo*
DotMd.Config.RolloverTodo

    Fields: ~
        {enabled?}   (boolean)   Rollover the nearest previous unchecked todos to today's date, default is `false`
        {headings?}  (string[])  H2 Headings to search for in your todos template to rollover, default is { "Tasks" }


DotMd.Config.DirNames                   *dotmd.nvim.types.DotMd.Config.DirNames*

    Fields: ~
        {notes?}     (string)  Directory name for notes, default is "notes"
        {todos?}     (string)  Todo directory name, default is "todos"
        {journals?}  (string)  Journal directory name, default is "journals"


Dotmd.Config.Templates                 *dotmd.nvim.types.Dotmd.Config.Templates*

    Fields: ~
        {notes?}     (fun(name:string):string[])
        {todos?}     (fun(date:string):string[])
        {journals?}  (fun(date:string):string[])
        {inbox?}     (fun(date:string):string[])


DotMd.CreateFileOpts                     *dotmd.nvim.types.DotMd.CreateFileOpts*

    Fields: ~
        {split?}  (DotMd.Split)  Split direction for new or existing files, default is based on `default_split` in config


DotMd.PickOpts                                 *dotmd.nvim.types.DotMd.PickOpts*

    Fields: ~
        {picker?}  (DotMd.PickerType)  Picker type, default is based on `picker` in config
        {type?}    (DotMd.PickType)    Pick type, default is `all`
        {grep?}    (boolean)           Grep the selected type directory for a string, default is false


DotMd.OpenOpts                                 *dotmd.nvim.types.DotMd.OpenOpts*

    Fields: ~
        {type?}             (DotMd.PickType)  Open type, default is `all`
        {query?}            (string)          Query to filter the files
        {split?}            (DotMd.Split)     Split direction for new or existing files, default is based on `default_split` in config
        {pluralise_query?}  (boolean)         Pluralise the query, default is `false`


vim:tw=78:ts=8:noet:ft=help:norl:
